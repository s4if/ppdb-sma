<?php



/**
 * RegistrantRepo
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RegistrantRepo extends Doctrine\ORM\EntityRepository
{
    public function getData($sex = null, $onlyShowCompleted = false, $showDeleted = false){
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->addSelect('r')->from('RegistrantEntity', 'r');
        if(!is_null($sex)){
            $qb->andwhere('r.sex = :sex');
        }
        if($onlyShowCompleted){
            $qb->andWhere($qb->expr()->andX(
                    $qb->expr()->isNotNull('r.father'),
                    $qb->expr()->isNotNull('r.mother')
                    ));
        }
        if(!$showDeleted){
            $qb->andWhere($qb->expr()->neq('r.deleted', ':deleted'));
        }
        $qb->orderBy('r.id', 'ASC');
        if(!is_null($sex)){
            $qb->setParameter('sex', $sex);
        }
        if(!$showDeleted){
            $qb->setParameter('deleted', true);
        }
        $query = $qb->getQuery();
        $result =  $query->getResult();
        return $result;
    }
    
    public function getCount(){
        $query = $this->getEntityManager()->createQuery('SELECT COUNT(r.id) FROM RegistrantEntity r');
        $count = $query->getSingleScalarResult();   
        return $count;
    }
    
    public function getCountByFilter($filter){
//        try {
            $qb = $this->getEntityManager()->createQueryBuilder();
            $qb->select('COUNT(r.id)')
                    ->from('RegistrantEntity', 'r');
            foreach ($filter as $key => $value){
                $qb->andWhere('r.'.$key .' = :set'.$key);
            }
            $qb->andWhere($qb->expr()->neq('r.deleted', ':deleted'));
            foreach ($filter as $key => $value){
                $qb->setParameter('set'.$key, $value);
            }
            $qb->setParameter('deleted', true);
            $count = $qb->getQuery()->getSingleScalarResult();
            return $count;
//        } catch (Doctrine\ORM\Query\QueryException $e) {
//            return false;
//        }
    }
}
