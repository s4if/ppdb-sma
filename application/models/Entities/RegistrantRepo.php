<?php

/**
 * RegistrantRepo.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RegistrantRepo extends Doctrine\ORM\EntityRepository
{
    public function getData($gender = null, $onlyShowCompleted = false, $showDeleted = false)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->addSelect('r')->from('RegistrantEntity', 'r');
        if (!is_null($gender)) {
            $qb->andwhere('r.gender = :gender');
        }
        if ($onlyShowCompleted) {
            $qb->andWhere('r.finalized = true');
        }
        if (!$showDeleted) {
            $qb->andWhere($qb->expr()->neq('r.deleted', ':deleted'));
        }
        $qb->orderBy('r.id', 'ASC');
        if (!is_null($gender)) {
            $qb->setParameter('gender', $gender);
        }
        if (!$showDeleted) {
            $qb->setParameter('deleted', true);
        }
        $query = $qb->getQuery();
        $result = $query->getResult();

        return $result;
    }

    public function getDataByUsername($username)
    {
        try {
            $qb = $this->getEntityManager()->createQueryBuilder();
            $qb->addSelect('r')->from('RegistrantEntity', 'r')
                    ->andwhere('r.username = :username')
                    ->setParameter('username', $username);
            $query = $qb->getQuery();
            $result = $query->getSingleResult();

            return $result;
        } catch (Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function getDataByJurusan($tahfidz, $gender = null, $showDeleted = false, $finalized = true)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->Select(['r']);
        $qb->from('RegistrantEntity', 'r')->join('RegistrantDataEntity', 'd');
        $qb->where('r.program = :program');
        if (!is_null($gender)) {
            $qb->andwhere('r.gender = :gender');
        }
        $qb->andWhere($qb->expr()->eq('r.deleted', ':deleted'));
        $qb->andWhere($qb->expr()->eq('r.finalized', ':finalized'));
        $qb->orderBy('r.id', 'ASC');
        if (!is_null($gender)) {
            $qb->setParameter('gender', $gender);
        }
        $qb->setParameter('program', $tahfidz);
        $qb->setParameter('deleted', $showDeleted);
        $qb->setParameter('finalized', $finalized);
        $query = $qb->getQuery();

        $query->setFetchMode('RegistrantEntity', 'registrantData', \Doctrine\ORM\Mapping\ClassMetadata::FETCH_EAGER);
        $query->setFetchMode('RegistrantEntity', 'father', \Doctrine\ORM\Mapping\ClassMetadata::FETCH_EAGER);
        $query->setFetchMode('RegistrantEntity', 'mother', \Doctrine\ORM\Mapping\ClassMetadata::FETCH_EAGER);
        $query->setFetchMode('RegistrantEntity', 'guardian', \Doctrine\ORM\Mapping\ClassMetadata::FETCH_EAGER);
        $query->setFetchMode('RegistrantDataEntity', 'achievements', \Doctrine\ORM\Mapping\ClassMetadata::FETCH_EAGER);
        $query->setFetchMode('RegistrantDataEntity', 'hobbies', \Doctrine\ORM\Mapping\ClassMetadata::FETCH_EAGER);
        $query->setFetchMode('RegistrantDataEntity', 'physicalAbnormalities', \Doctrine\ORM\Mapping\ClassMetadata::FETCH_EAGER);
        $query->setFetchMode('RegistrantDataEntity', 'hospitalSheets', \Doctrine\ORM\Mapping\ClassMetadata::FETCH_EAGER);
        $result = $query->getResult();

        return $result;
    }
    
    public function getCountByFilter($filter)
    {
        try {
                $qb = $this->getEntityManager()->createQueryBuilder();
            $qb->select('COUNT(r.id)')
                        ->from('RegistrantEntity', 'r');
            foreach ($filter as $key => $value) {
                $qb->andWhere('r.'.$key.' = :set'.$key);
            }
            $qb->andWhere($qb->expr()->neq('r.deleted', ':deleted'));
            foreach ($filter as $key => $value) {
                $qb->setParameter('set'.$key, $value);
            }
            $qb->setParameter('deleted', true);
            $count = $qb->getQuery()->getSingleScalarResult();

            return $count;
        } catch (Doctrine\ORM\Query\QueryException $e) {
            return false;
        }
    }
}
